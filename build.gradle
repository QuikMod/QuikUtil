// ==================================================
// Gradle Buildscript
// ==================================================

// ==================================================
// Plugins
// ==================================================
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

// ==================================================
// Primary configuration
// ==================================================
group = 'com.github.quikmod.quikutil'
archivesBaseName = 'quikutil'
version = '0.0.0'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// ==================================================
// Repositories
// ==================================================
repositories {
	mavenLocal()
    mavenCentral()
	jcenter()
}

// ==================================================
// Dependencies
// ==================================================

// 
// Compilation Dependencies.
//
dependencies {
    // Google Guava, since is essential library.
    compile 'com.google.guava:guava:24.0-jre'
    
    // JSR305 for @nonnull annotations and such.
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    
    // Logback for handling all the logging.
    compile 'ch.qos.logback:logback-classic:1.2.3'
}

//
// Test Dependencies
//
dependencies {
    // JUnit 4 for testing.
    testCompile 'junit:junit:4.12'
    
    // Truth for better assertions.
    testCompile "com.google.truth:truth:0.40"
    
    // Java 8 extensions for Truth
    testCompile "com.google.truth.extensions:truth-java8-extension:0.40"
}

// ==================================================
// Compilation
// ==================================================
tasks.withType(JavaCompile) {
    // The following ensures that xlint is on.
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

// ==================================================
// Code Coverage
// ==================================================
jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}

// ==================================================
// Sources Jar
// ==================================================
task sourcesJar(type: Jar) {
    classifier = 'sources'
	from sourceSets.main.allSource
}

// ==================================================
// Javadoc Jar
// ==================================================
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// ==================================================
// Artifacts
// ==================================================
artifacts {
    archives sourcesJar
    archives javadocJar
}
